{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What","text":"<p> FastAPI Hive Framework, modulization of code layout, decoupling codes into cornerstones and endpoints, developer-friendly, easy to be integrated </p> <p> </p>"},{"location":"#introduction","title":"Introduction:","text":"<p>Regular fastapi project setups some folders for storing specific function codes,  such as router folder for api registering folder and model folder for defining db tables and pydantic data model.</p> <p>So one service codes have to be splitted and exist in several folders, the problem is the code-review issue of looking for them with jumpping different folders again and again.</p> <p>If you feel it is tiresome task like me, then FastAPI Hive is just for you.</p> <p>Every bee is thought as the entity of one service codes, defined as endpoints, including all function codes(router, model). FastAPI Hive is the container(bee's home) for all bees.  </p> <p>Also for these common function code, like database setup and authentication codes, they are defined as cornerstones, which are key to construct bee's hive, every function code are put into one cornerstone folder together.</p> <p>Documentation: https://fanqingsong.github.io/fastapi-hive</p> <p>Source Code: https://github.com/fanqingsong/fastapi-hive</p> <p>PYPI: https://pypi.org/project/fastapi-hive/</p> <p>FastAPI Hive Framework is a developer friendly and easy to be integrated framework for managing your code by endpoints and cornerstones folder structure.</p> <p>The key features are:</p> <ul> <li>Conerstone Container: a top-level folder to layout codes by function folder, like db and authentication. </li> <li>Endpoint Container: a top-level folder to layout service codes by endpoint folder,  </li> <li>Endpoint folder: a sub-folder in Endpoint Container, layout one service code by function folder(router, db, service, etc).</li> <li>Router Mounting Automatically: the router defined by module will be mounted into app automatically.</li> <li>Model Preloading Easily: the service(such as ML model) defined by module will be mounted into app easily, in order to reduce loading time during endpoint request.</li> <li>Developer-Friendly: all one-endpoint/cornerstone codes are put in one same folders, easy to review and update.</li> <li>Easy-to-be-Integrated: Just several line codes to integrate it in your app.</li> </ul> <p>estimation based on tests by author with this project**, have a look at example folder.</p>"},{"location":"#overview","title":"Overview","text":"<p>Folders are set in such layout, urls are mapped by folder structure automatically.</p> <p></p>"},{"location":"#requirements","title":"Requirements","text":"<p>Python 3.7+</p> <p>FastAPI Hive Framework stands on the shoulders of giants:</p> <ul> <li>FastAPI web framework.</li> </ul>"},{"location":"#have-a-try","title":"Have a Try","text":""},{"location":"#installation","title":"Installation","text":""},{"location":"#install-hive-from-pypi","title":"install hive from pypi","text":"<pre><code>pip3 install fastapi_hive\n</code></pre>"},{"location":"#install-hive-from-source-code","title":"install hive from source code","text":"<p>First, git clone this repo.</p> <pre><code>git clone git@github.com:fanqingsong/fastapi-hive.git\n</code></pre> <p>Second, install ioc framework library of this container_name Note: If you just treat it as a library, and want to integrate it into your app, you can just run this command. </p> <pre><code>pip3 install .\n</code></pre>"},{"location":"#install-dependency-packages","title":"install dependency packages","text":"<p>Third, install the required packages for running demo in your local environment (ideally virtualenv, conda, etc.). Note: You can reference demo code to make up your own app in anywhere. </p> <pre><code>pip3 install -r requirements.txt\n</code></pre>"},{"location":"#setup","title":"Setup","text":"<ol> <li> <p>Duplicate the <code>.env.example</code> file and rename it to <code>.env</code> </p> </li> <li> <p>In the <code>.env</code> file configure the <code>API_KEY</code> entry. The key is used for authenticating our API.     A sample API key can be generated using Python REPL:</p> </li> </ol> <pre><code>import uuid\nprint(str(uuid.uuid4()))\n</code></pre>"},{"location":"#run-app","title":"Run  app","text":"<ol> <li>Start example app with: </li> </ol> <p>production running command:</p> <pre><code>uvicorn example.main:app\n</code></pre> <p>developing running command:</p> <pre><code>uvicorn example.main:app --reload\n</code></pre> <ol> <li> <p>Go to http://localhost:8000/docs.</p> </li> <li> <p>Click <code>Authorize</code> and enter the API key as created in the Setup step. </p> </li> <li> <p>You can use the sample payload from the <code>docs/sample_payload.json</code> file when trying out the house price prediction model using the API.    </p> </li> </ol>"},{"location":"#run-tests","title":"Run Tests","text":"<p>If you're not using <code>tox</code>, please install with:</p> <pre><code>pip3 install tox\n</code></pre> <p>Run your tests with: </p> <pre><code>tox\n</code></pre> <p>This runs tests and coverage for Python 3.6 and Flake8, Autopep8, Bandit.</p>"},{"location":"#package-and-upload","title":"Package and Upload","text":"<p>For maintainer of this project, please follow: Before these action, change version in setup.py</p> <pre><code>python3 setup.py sdist\n\ntwine upload dist/*\n\n</code></pre>"},{"location":"design/","title":"Design","text":""},{"location":"design/#dip-principle","title":"DIP Principle","text":"<p>      DIP is one of the SOLID object-oriented principle invented by Robert Martin (a.k.a. Uncle Bob)      </p> <pre><code>DIP Definition\n\n* High-level cornerstones should not depend on low-level cornerstones. \n    Both should depend on the abstraction.\n\n* Abstractions should not depend on details. \n    Details should depend on abstractions.\n</code></pre> <p>Source: https://martinfowler.com/articles/injection.html</p> <p>Theory: https://www.cs.utexas.edu/users/downing/papers/DIP-1996.pdf</p> <p>Example: https://www.geeksforgeeks.org/dependecy-inversion-principle-solid/</p> <p>Tutorial: https://www.tutorialsteacher.com/ioc</p>"},{"location":"design/#architecture","title":"Architecture","text":""},{"location":"design/#three-layers","title":"Three Layers","text":"<p>Based on FastAPI framework, FastAPI-Hive Framework supports two components: cornerstone and endpoint.</p> <p>cornerstone for common modules which are dependent on by endpoints.</p> <p>endpoint for every service module which expose routers on swagger API page.</p> <p></p>"},{"location":"design/#initialization-precedure-of-startup","title":"Initialization Precedure of Startup","text":"<p>FastAPI Hive Framework loads packages of cornerstones and endpoints, It covers the cornerstone and enpoint common initialization requirements, and provide hooks mechanism to setup/teardown environment. As of router, it will be mounted into app during app startup automatically.</p> <p>so the overview of precedure: * loading cornerstones * loading endpoints * call setup hooks to initialize all modules</p>"},{"location":"design/#setup-hooks-calling-flow","title":"Setup hooks calling flow:","text":"<p>There are serveral stages in setup hooks calling stages: * call external pre_endpoint_setup hook (from global part) * call cornerstones' pre_endpoint_setup hooks one by one. * call endpoints' setup hooks one by one, but in this stage, there are three in-built sub-modules(db/service/router) which also can be hooked. * call external post_endpoint_setup hook * call cornerstones' post_endpoint_setup hooks one by one</p> <p>The same is as with teardown hooks calling logic.</p> <p></p>"},{"location":"design/#initialization-precedure-of-request","title":"Initialization Precedure of Request","text":"<p>Beside setup and teardown hooks, maybe you also notice that there are two extra hooks (pre_endpoint_call/post_endpoint_call) in above picture.</p> <p>Yes, it is just for setup some resource before handling request.</p> <p>For example, db.connect is expected before endpoint handle request, and db.disconnect is expected after endpoint handle request.</p> <p>It is implemented in a in-built http middleware. The flow is like below:</p> <pre><code>---&gt; request \n---&gt; cornerstones' pre_endpoint_call \n---&gt; endpoint excution \n---&gt; cornerstones' post_endpoint_call\n</code></pre>"},{"location":"how/","title":"How","text":"<p>FastAPI Hive Framework is the solution to the problems in \"why\" chapter. In this chapter, let see how to apply it in project.</p>"},{"location":"how/#install-it","title":"Install it.","text":"<pre><code>pip3 install fastapi_hive\n</code></pre>"},{"location":"how/#integrate-it-into-your-app","title":"Integrate it into your app","text":"<p>Note: You can reference example code to complete this part. </p>"},{"location":"how/#make-packages-of-cornerstones-and-endpoints","title":"Make packages of cornerstones and endpoints","text":"<p>First, create or refactor you code into cornerstones and endpoints folders:</p> <p></p> <p>Code Folder Structure</p> <pre><code>app\n    cornerstones\n        db\n            __init__.py\n            implement.py\n        auth\n            __init__.py\n            implement.py\n    endpoint_packages\n        heartbeat\n            api.py\n            models.py\n            service.py\n            __init__.py\n        house_price\n            api.py\n            models.py\n            service.py\n            __init__.py\n</code></pre> <p>From code view, the setup or teardown hooks should be set in init.py if needed.</p> <p>For cornerstone</p> <pre><code>\nfrom fastapi import FastAPI\nfrom fastapi_hive.ioc_framework.cornerstone_hooks import CornerstoneHooks, CornerstoneAsyncHooks\nfrom example.cornerstone.auth.implement import validate_request\n\n\nclass CornerstoneHooksImpl(CornerstoneHooks):\n\n    def __init__(self):\n        super(CornerstoneHooksImpl, self).__init__()\n\n    def pre_endpoint_setup(self):\n        print(\"call pre setup from CornerstoneHooksImpl!!!\")\n        print(\"---- get fastapi app ------\")\n        print(self.app)\n\n    def post_endpoint_setup(self):\n        print(\"call post setup from CornerstoneHooksImpl!!!\")\n\n    def pre_endpoint_teardown(self):\n        print(\"call pre teardown from CornerstoneHooksImpl!!!\")\n\n    def post_endpoint_teardown(self):\n        print(\"call pre teardown from CornerstoneHooksImpl!!!\")\n\n    def pre_endpoint_call(self):\n        pass\n\n    def post_endpoint_call(self):\n        pass\n\n\nclass CornerstoneAsyncHooksImpl(CornerstoneAsyncHooks):\n\n    def __init__(self):\n        super(CornerstoneAsyncHooksImpl, self).__init__()\n\n    async def pre_endpoint_setup(self):\n        print(\"call pre setup from CornerstoneAsyncHooksImpl!!!\")\n\n    async def post_endpoint_setup(self):\n        print(\"call post setup from CornerstoneAsyncHooksImpl!!!\")\n\n    async def pre_endpoint_teardown(self):\n        print(\"call pre teardown from CornerstoneAsyncHooksImpl!!!\")\n\n    async def post_endpoint_teardown(self):\n        print(\"call pre teardown from CornerstoneAsyncHooksImpl!!!\")\n\n    async def pre_endpoint_call(self):\n        pass\n\n    async def post_endpoint_call(self):\n        pass\n\n</code></pre> <p>For endpoint</p> <pre><code>\nfrom fastapi import FastAPI\nfrom fastapi_hive.ioc_framework.endpoint_hooks import EndpointHooks, EndpointAsyncHooks\n\n\nclass EndpointHooksImpl(EndpointHooks):\n\n    def __init__(self):\n        super(EndpointHooksImpl, self).__init__()\n\n    def setup(self):\n        print(\"call pre setup from EndpointHooksImpl!!!\")\n        print(\"---- get fastapi app ------\")\n        print(self.app)\n\n    def teardown(self):\n        print(\"call pre teardown from EndpointHooksImpl!!!\")\n\n\nclass EndpointAsyncHooksImpl(EndpointAsyncHooks):\n\n    def __init__(self):\n        super(EndpointAsyncHooksImpl, self).__init__()\n\n    async def setup(self):\n        print(\"call pre setup from EndpointAsyncHooksImpl!!!\")\n\n    async def teardown(self):\n        print(\"call pre teardown from EndpointAsyncHooksImpl!!!\")\n\n\n</code></pre> <p>For the hooks running flow, please reference the belowing diagram: Note: it only depict the startup flow, it is same as shutdown flow.</p> <p></p>"},{"location":"how/#setup-hive-framework-init-codes","title":"Setup hive framework init codes","text":"<p>Second, setup the initial code snippet of ioc_framework in main.py</p> <pre><code>\n\nfrom fastapi import FastAPI\nfrom loguru import logger\nfrom example.cornerstone.config import (APP_NAME, APP_VERSION, API_PREFIX,\n                                        IS_DEBUG)\n\nfrom fastapi_hive.ioc_framework import IoCFramework\n\n\ndef get_app() -&gt; FastAPI:\n    logger.info(\"app is starting.\")\n\n    fast_app = FastAPI(title=APP_NAME, version=APP_VERSION, debug=IS_DEBUG)\n\n    def hive_pre_setup():\n        logger.info(\"------ call pre setup -------\")\n\n    def hive_post_setup():\n        logger.info(\"------ call post setup -------\")\n\n    async def hive_async_pre_setup():\n        logger.info(\"------ call async pre setup -------\")\n\n    async def hive_async_post_setup():\n        logger.info(\"------ call async post setup -------\")\n\n    ioc_framework = IoCFramework(fast_app)\n    ioc_framework.config.CORNERSTONE_PACKAGE_PATH = \"./example/cornerstone/\"\n\n    ioc_framework.config.API_PREFIX = API_PREFIX\n    ioc_framework.config.ENDPOINT_PACKAGE_PATHS = [\"./example/endpoints_package1\", \"./example/endpoints_package2\"]\n    ioc_framework.config.ROUTER_MOUNT_AUTOMATED = True\n    ioc_framework.config.HIDE_ENDPOINT_CONTAINER_IN_API = True\n    ioc_framework.config.HIDE_ENDPOINT_IN_API = False\n    ioc_framework.config.HIDE_ENDPOINT_IN_TAG = True\n    ioc_framework.config.PRE_ENDPOINT_SETUP = hive_pre_setup\n    ioc_framework.config.POST_ENDPOINT_SETUP = hive_post_setup\n    ioc_framework.config.ASYNC_PRE_ENDPOINT_SETUP = hive_async_pre_setup\n    ioc_framework.config.ASYNC_POST_ENDPOINT_SETUP = hive_async_post_setup\n\n    ioc_framework.init_modules()\n\n    @fast_app.get(\"/\")\n    def get_root():\n        return \"Go to docs URL to look up API: http://localhost:8000/docs\"\n\n    return fast_app\n\n\napp = get_app()\n\n</code></pre>"},{"location":"how/#url-mapping","title":"URL MAPPING","text":"<p>As you know, this framework will discover and load all cornerstones and endpoints in all packages automatically. The API endpoint URLs will be constructed by endpoint container folder name or endpoint folder name, in order to avoid conflicts and be sensible.</p> <p>If the folder structure likes below</p> <pre><code>    app\n        endpoint_packages\n            heartbeat\n                router.py\n                models.py\n                service.py\n            prediction\n                router.py\n                models.py\n                service.py\n        main.py\n</code></pre> <p>Then, the API URLs will be like below:</p> <pre><code>{API_PREFIX}/endpoint_packages/heartbeat/xxx\n{API_PREFIX}/endpoint_packages/prediction/yyy\n</code></pre> <p>Note:</p> <ol> <li>xxx url path is defined in endpoint_packages/heartbeat/router.py</li> <li>yyy url path is defined in endpoint_packages/prediction/router.py</li> </ol> <p>if your app don't want to display container_name name in URL, you can turn on HIDE_PACKAGE_IN_URL of configuration, After turnning off, the endpoint URLs will be like:</p> <pre><code>{API_PREFIX}/heartbeat/xxx\n{API_PREFIX}/prediction/yyy\n</code></pre> <p>Also if you want to disabled the router automated mount function, you can set config with ROUTER_MOUNT_AUTOMATED = False, then you can set hooks to register router by yourself.</p> <p>example\\endpoints_package1\\house_price\\router__init__.py</p> <pre><code>\nfrom example.endpoints_package1.house_price.router.implement import router\n\nfrom fastapi import FastAPI\nfrom fastapi_hive.ioc_framework.endpoint_hooks import EndpointHooks\n\n\nclass EndpointHooksImpl(EndpointHooks):\n\n    def __init__(self):\n        super(EndpointHooksImpl, self).__init__()\n\n    def setup(self):\n        print(\"call pre setup from EndpointHooksImpl (service)!!!\")\n\n        app: FastAPI = self.app\n\n        app.include_router(router, tags=[\"house price\"], prefix=f\"/v1/house_price1\")\n\n</code></pre>"},{"location":"model_description/","title":"Model Description","text":""},{"location":"model_description/#california-housing-prices","title":"California Housing Prices","text":""},{"location":"model_description/#model-features-as-defined-in-original-data-set-from-the-statlib-repo-httplibstatcmuedudatasets-1","title":"Model Features (as defined in original data set from the StatLib repo. http://lib.stat.cmu.edu/datasets/ [1])","text":"<ul> <li>MedInc median income in block*</li> <li>HouseAge median house age in block*</li> <li>AveRooms average number of rooms</li> <li>AveBedrms average number of bedrooms</li> <li>Population block population</li> <li>AveOccup average house occupancy</li> <li>Latitude house block latitude</li> <li>Longitude house block longitude</li> </ul> <p>*A block group is the smallest geographical unit for which the U.S. Census Bureau publishes sample data (300 - 6.000 people) [2]</p>"},{"location":"model_description/#target-variable","title":"Target variable","text":"<ul> <li>Median house value for California districts</li> </ul>"},{"location":"model_description/#references","title":"References","text":"<p>[1] Pace, R. Kelley and Ronald Barry, Sparse Spatial Autoregressions, Statistics and Probability Letters, 33 (1997) 291-297 [2] https://scikit-learn.org/stable/datasets/index.html#california-housing-dataset</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#ioc_framework-configs","title":"ioc_framework configs","text":"<p>All configuarable parameters are listed below.</p> name description default CORNERSTONE_PACKAGE_PATH cornerstone path \"./cornerstone\" API_PREFIX all api prefix, usual for version, such as \"v1\" \"\" ROUTER_MOUNT_AUTOMATED if router mounted automatically True HIDE_ENDPOINT_CONTAINER_IN_API if endpoint container folder name showed in API False HIDE_ENDPOINT_IN_API if endpoint name showed in API Flase HIDE_ENDPOINT_IN_TAG if endpoint name showed in tag False PRE_ENDPOINT_SETUP external pre endpoint setup None POST_ENDPOINT_SETUP external post endpoint setup None PRE_ENDPOINT_TEARDOWN external pre endpoint teardown None POST_ENDPOINT_TEARDOWN external post endpoint POST_ENDPOINT_TEARDOWN None ASYNC_PRE_ENDPOINT_SETUP external async pre endpoint setup None ASYNC_POST_ENDPOINT_SETUP external async post endpoint setup None ASYNC_PRE_ENDPOINT_TEARDOWN external async pre endpoint teardown None ASYNC_POST_ENDPOINT_TEARDOWN external async post endpoint POST_ENDPOINT_TEARDOWN None <p>These configs are set before ioc framework initialization.</p> <pre><code>\nfrom fastapi import FastAPI\nfrom loguru import logger\nfrom example.cornerstone.config import (APP_NAME, APP_VERSION, API_PREFIX,\n                                        IS_DEBUG)\n\nfrom fastapi_hive.ioc_framework import IoCFramework\n\n\ndef get_app() -&gt; FastAPI:\n    logger.info(\"app is starting.\")\n\n    fast_app = FastAPI(title=APP_NAME, version=APP_VERSION, debug=IS_DEBUG)\n\n    def hive_pre_setup():\n        logger.info(\"------ call pre setup -------\")\n\n    def hive_post_setup():\n        logger.info(\"------ call post setup -------\")\n\n    async def hive_async_pre_setup():\n        logger.info(\"------ call async pre setup -------\")\n\n    async def hive_async_post_setup():\n        logger.info(\"------ call async post setup -------\")\n\n    ioc_framework = IoCFramework(fast_app)\n    ioc_framework.config.CORNERSTONE_PACKAGE_PATH = \"./example/cornerstone/\"\n\n    ioc_framework.config.API_PREFIX = API_PREFIX\n    ioc_framework.config.ENDPOINT_PACKAGE_PATHS = [\"./example/endpoints_package1\", \"./example/endpoints_package2\"]\n    ioc_framework.config.ROUTER_MOUNT_AUTOMATED = True\n    ioc_framework.config.HIDE_ENDPOINT_CONTAINER_IN_API = True\n    ioc_framework.config.HIDE_ENDPOINT_IN_API = False\n    ioc_framework.config.HIDE_ENDPOINT_IN_TAG = True\n    ioc_framework.config.PRE_ENDPOINT_SETUP = hive_pre_setup\n    ioc_framework.config.POST_ENDPOINT_SETUP = hive_post_setup\n    ioc_framework.config.ASYNC_PRE_ENDPOINT_SETUP = hive_async_pre_setup\n    ioc_framework.config.ASYNC_POST_ENDPOINT_SETUP = hive_async_post_setup\n\n    ioc_framework.init_modules()\n\n    @fast_app.get(\"/\")\n    def get_root():\n        return \"Go to docs URL to look up API: http://localhost:8000/docs\"\n\n    return fast_app\n\n\napp = get_app()\n\n</code></pre>"},{"location":"reference/#cornerstone-hooks","title":"cornerstone hooks","text":"<p>The framework provides abstract parent classes (CornerstoneHooks &amp; CornerstoneAsyncHooks), every cornerstone instance must setup hook instace inherited from the parent classes, and can use dependency objects of parent classes.</p> <p>the following is the visibility of dependency objects regarding to each hook.</p> hook name app cornerstone request app_state request_state pre_endpoint_setup Yes Yes No Yes No post_endpoint_setup Yes Yes No Yes No pre_endpoint_teardown Yes Yes No Yes No post_endpoint_teardown Yes Yes No Yes No pre_endpoint_call Yes Yes Yes Yes Yes post_endpoint_call Yes Yes Yes Yes Yes <p>If the visibility of one dependency object is Yes to one hook, i.e. this dependency can be used in the hook.</p> <p>dependency objects are injected by framework, each object has its meaning like below:</p> name meaning app the instance of FastAPI cornerstone the meta data of the cornerstone that hook belong to request the incoming http request object app_state this cornerstone's state in app.state, hook can set key with value in this dict, and it can be accessed by request.app.state.cornerstones['cornerstone.xxx']['key'] in router implementation. request_state this cornerstone's state in request.state\uff0chook can set key with value in this dict, and it can be accessed by request.state.cornerstones['cornerstone.xxx']['key'] in router implementation. <p>please check in the code for usages.</p> <p>either of sync or async mode can be used.</p> <p>hooks can be set in cornerstone init file.</p> <p>example/cornerstone/db/init.py</p> <pre><code>import logging\nimport time\nfrom fastapi_hive.ioc_framework.cornerstone_hooks import CornerstoneHooks, CornerstoneAsyncHooks\nfrom example.cornerstone.db.implement import Base, create_all_tables, add_db_middleware\nfrom fastapi import FastAPI\nfrom starlette.requests import Request\nfrom fastapi_sqlalchemy import db\n\n\n__all__ = ['Base']\n\n\nclass CornerstoneHooksImpl(CornerstoneHooks):\n\n    def __init__(self):\n        super(CornerstoneHooksImpl, self).__init__()\n\n    def pre_endpoint_setup(self):\n        print(\"call pre setup from cornerstone db!!!\")\n\n        add_db_middleware(self.app, self.cornerstone)\n\n        self.app_state['db'] = db\n\n    def post_endpoint_setup(self):\n        print(\"call post setup from cornerstone!!!\")\n\n        create_all_tables(self.app)\n\n    def pre_endpoint_teardown(self):\n        print(\"call pre teardown from cornerstone!!!\")\n\n    def post_endpoint_teardown(self):\n        print(\"call pre teardown from cornerstone!!!\")\n\n    def pre_endpoint_call(self):\n        print(\"call pre endpoint call from cornerstone!!!\")\n\n        self.request_state['db'] = db\n\n    def post_endpoint_call(self):\n        print(\"call post endpoint call from cornerstone!!!\")\n\n\nclass CornerstoneAsyncHooksImpl(CornerstoneAsyncHooks):\n\n    def __init__(self):\n        super(CornerstoneAsyncHooksImpl, self).__init__()\n\n    async def pre_endpoint_setup(self):\n        print(\"call pre setup from cornerstone async!!!\")\n\n    async def post_endpoint_setup(self):\n        print(\"call post setup from cornerstone async!!!\")\n\n    async def pre_endpoint_teardown(self):\n        print(\"call pre teardown from cornerstone async!!!\")\n\n    async def post_endpoint_teardown(self):\n        print(\"call pre teardown from cornerstone async!!!\")\n\n    async def pre_endpoint_call(self):\n        print(\"call pre endpoint call from cornerstone async!!!\")\n\n    async def post_endpoint_call(self):\n        print(\"call post endpoint call from cornerstone async!!!\")\n</code></pre>"},{"location":"reference/#endpoint-hooks","title":"endpoint hooks","text":"<p>The framework provides abstract parent classes (EndpointHooks &amp; EndpointAsyncHooks), every endpoint instance can setup hook instace inherited from the parent classes, and can use dependency objects of parent classes.</p> <p>the following is the visibility of dependency objects regarding to each hook.</p> hook name app endpoint app_state setup Yes Yes Yes teardown Yes Yes Yes <p>If the visibility of one dependency object is Yes to one hook, i.e. this dependency can be used in the hook.</p> <p>dependency objects are injected by framework, each object has its meaning like below:</p> name meaning app the instance of FastAPI endpoint the meta data of the endpoint that hook belong to app_state this endpoint's state in app.state, hook can set key with value in this dict, and it can be accessed by request.app.state.endpoints['xxx_endpoints.xxx']['key'] in router implementation. <p>please check in the code for usages.</p> <p>either of sync or async mode can be used.</p> <p>hooks can be set in endpoint init file and three sub-modules(db/service/router) init file.</p> <p>example/endpoints_package1/house_price/service/init.py</p> <pre><code>\nfrom example.endpoints_package1.house_price.service.implement import HousePriceModel\nfrom example.endpoints_package1.house_price.config import DEFAULT_MODEL_PATH\nfrom fastapi import FastAPI\nfrom fastapi_hive.ioc_framework.endpoint_hooks import EndpointHooks, EndpointAsyncHooks\n\n\nclass EndpointHooksImpl(EndpointHooks):\n\n    def __init__(self):\n        super(EndpointHooksImpl, self).__init__()\n\n    def setup(self):\n        print(\"call pre setup from EndpointHooksImpl (service)!!!\")\n\n        app_state = self.app_state\n        app_state['house_price_model'] = HousePriceModel(DEFAULT_MODEL_PATH)\n\n    def teardown(self):\n        print(\"call pre teardown from EndpointHooksImpl (service)!!!\")\n\n\nclass EndpointAsyncHooksImpl(EndpointAsyncHooks):\n\n    def __init__(self):\n        super(EndpointAsyncHooksImpl, self).__init__()\n\n    async def setup(self):\n        print(\"call pre setup from EndpointAsyncHooksImpl (service)!!!\")\n\n    async def teardown(self):\n        print(\"call pre teardown from EndpointAsyncHooksImpl (service)!!!\")\n\n</code></pre>"},{"location":"usecases/","title":"Use Cases","text":""},{"location":"usecases/#1-machine-learning-model-preloading-during-app-startup","title":"1. Machine Learning model preloading during app startup.","text":"<p>For machine learning model, it is not suitable to load model during request, because the time cost of model loading may be too long, so the proposed method is to load model before request stage, i.e. during app startup stage.</p>"},{"location":"usecases/#classical-disadvantages","title":"classical disadvantages","text":"<p>For the classical code layout example, it defines loading model logic func(start_app_handler) in core.event_handler.py file.</p> <p>Reference: https://github.com/eightBEC/fastapi-ml-skeleton/tree/master/fastapi_skeleton</p> <pre><code>from typing import Callable\n\nfrom fastapi import FastAPI\nfrom loguru import logger\n\nfrom fastapi_skeleton.core.config import DEFAULT_MODEL_PATH\nfrom fastapi_skeleton.services.models import HousePriceModel\n\n\ndef _startup_model(app: FastAPI) -&gt; None:\n    model_path = DEFAULT_MODEL_PATH\n    model_instance = HousePriceModel(model_path)\n    app.state.model = model_instance\n\n\ndef _shutdown_model(app: FastAPI) -&gt; None:\n    app.state.model = None\n\n\ndef start_app_handler(app: FastAPI) -&gt; Callable:\n    def startup() -&gt; None:\n        logger.info(\"Running app start handler.\")\n        _startup_model(app)\n    return startup\n\n\ndef stop_app_handler(app: FastAPI) -&gt; Callable:\n    def shutdown() -&gt; None:\n        logger.info(\"Running app shutdown handler.\")\n        _shutdown_model(app)\n    return shutdown\n</code></pre> <p>Then register start_app_handler as startup event in main.py, so model will be load when startup event happens.</p> <pre><code>from fastapi import FastAPI\n\nfrom fastapi_skeleton.api.routes.router import api_router\nfrom fastapi_skeleton.core.config import (API_PREFIX, APP_NAME, APP_VERSION,\n                                          IS_DEBUG)\nfrom fastapi_skeleton.core.event_handlers import (start_app_handler,\n                                                  stop_app_handler)\n\n\ndef get_app() -&gt; FastAPI:\n    fast_app = FastAPI(title=APP_NAME, version=APP_VERSION, debug=IS_DEBUG)\n    fast_app.include_router(api_router, prefix=API_PREFIX)\n\n    fast_app.add_event_handler(\"startup\", start_app_handler(fast_app))\n    fast_app.add_event_handler(\"shutdown\", stop_app_handler(fast_app))\n\n    return fast_app\n\n\napp = get_app()\n</code></pre> <p>But for the ideal code structure, we take assumption that all codes of one service should be put in one folder together. </p>"},{"location":"usecases/#fastapi-hive-advantages","title":"fastapi-hive advantages","text":"<p>FastAPI hive really support this code structure, and meet the preloading requirement which is implemented by regiser startup event.</p> <p>in the below file, we use setup hook to load machine learning model before request, and save loaded model as self._app.state.house_price_model.</p> <p>example/endpoints_package1/house_price/service/init.py</p> <pre><code>\n\nfrom example.endpoints_package1.house_price.service.implement import HousePriceModel\nfrom example.endpoints_package1.house_price.config import DEFAULT_MODEL_PATH\nfrom fastapi import FastAPI\nfrom fastapi_hive.ioc_framework.endpoint_hooks import EndpointHooks, EndpointAsyncHooks\n\n\nclass EndpointHooksImpl(EndpointHooks):\n\n    def __init__(self):\n        super(EndpointHooksImpl, self).__init__()\n\n    def setup(self):\n        print(\"call pre setup from EndpointHooksImpl (service)!!!\")\n\n        app_state = self.app_state\n        app_state['house_price_model'] = HousePriceModel(DEFAULT_MODEL_PATH)\n\n    def teardown(self):\n        print(\"call pre teardown from EndpointHooksImpl (service)!!!\")\n\n\nclass EndpointAsyncHooksImpl(EndpointAsyncHooks):\n\n    def __init__(self):\n        super(EndpointAsyncHooksImpl, self).__init__()\n\n    async def setup(self):\n        print(\"call pre setup from EndpointAsyncHooksImpl (service)!!!\")\n\n    async def teardown(self):\n        print(\"call pre teardown from EndpointAsyncHooksImpl (service)!!!\")\n\n</code></pre> <p>Then in router file, we implement predict endpoint which call loaded model with variable request.app.state.house_price_model</p> <p>example/endpoints_package1/house_price/router/implement.py</p> <pre><code>from fastapi import APIRouter, Depends\nfrom starlette.requests import Request\n\nfrom example.cornerstone import auth\n\nfrom example.endpoints_package1.house_price.schema.payload import (\n    HousePredictionPayload)\nfrom example.endpoints_package1.house_price.schema.prediction import HousePredictionResult\n\nfrom example.endpoints_package1.house_price.service import HousePriceModel\n\n\nrouter = APIRouter()\n\n\n@router.post(\"/predict\", response_model=HousePredictionResult, name=\"predict\")\ndef post_predict(\n    request: Request,\n    authenticated: bool = Depends(auth.validate_request),\n    block_data: HousePredictionPayload = None\n) -&gt; HousePredictionResult:\n\n    model: HousePriceModel = request.app.state.endpoints['endpoints_package1.house_price']['house_price_model']\n    prediction: HousePredictionResult = model.predict(block_data)\n\n    return prediction\n\n</code></pre>"},{"location":"usecases/#2-db-orm-definition-and-table-creation-db-instance-for-endpoints","title":"2. DB ORM definition and table creation &amp;&amp; db instance for endpoints.","text":""},{"location":"usecases/#classical-disadvantages_1","title":"classical disadvantages","text":"<p>For db setting definition, sqlalchemy let user create a Base object.</p> <p>https://fastapi.tiangolo.com/tutorial/sql-databases/</p> <pre><code>from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nSQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\"\n# SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\"\n\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()\n\n</code></pre> <p>Then every service code which need db have to define ORM model inherited from Base object.</p> <pre><code>from sqlalchemy import Boolean, Column, ForeignKey, Integer, String\nfrom sqlalchemy.orm import relationship\n\nfrom .database import Base\n\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    email = Column(String, unique=True, index=True)\n    hashed_password = Column(String)\n    is_active = Column(Boolean, default=True)\n\n    items = relationship(\"Item\", back_populates=\"owner\")\n\n\nclass Item(Base):\n    __tablename__ = \"items\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String, index=True)\n    description = Column(String, index=True)\n    owner_id = Column(Integer, ForeignKey(\"users.id\"))\n\n    owner = relationship(\"User\", back_populates=\"items\")\n\n</code></pre> <p>Then main.py call a sentance to create all tables in DB:</p> <p>this sentance: models.Base.metadata.create_all(bind=engine)</p> <pre><code>from fastapi import Depends, FastAPI, HTTPException\nfrom sqlalchemy.orm import Session\n\nfrom . import crud, models, schemas\nfrom .database import SessionLocal, engine\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = FastAPI()\n\n\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\n@app.post(\"/users/\", response_model=schemas.User)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    db_user = crud.get_user_by_email(db, email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return crud.create_user(db=db, user=user)\n\n\n@app.get(\"/users/\", response_model=list[schemas.User])\ndef read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    users = crud.get_users(db, skip=skip, limit=limit)\n    return users\n\n\n@app.get(\"/users/{user_id}\", response_model=schemas.User)\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    db_user = crud.get_user(db, user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n\n@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\ndef create_item_for_user(\n    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n):\n    return crud.create_user_item(db=db, item=item, user_id=user_id)\n\n\n@app.get(\"/items/\", response_model=list[schemas.Item])\ndef read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    items = crud.get_items(db, skip=skip, limit=limit)\n    return items\n\n</code></pre> <p>But there is an implicit import dependency to care during coding: in models.py file, import Base first, then define ORM model inherited from Base, in main.py file, call create_all function to create tables in DB. For large project, there are many ORM model to be defined,  It is not suitable to define all of them in one file(models.py), So it comes to fastapi-hive framework to decoupling db function module from endpoint service module.</p> <pre><code>from . import crud, models, schemas\nfrom .database import SessionLocal, engine\n\nmodels.Base.metadata.create_all(bind=engine)\n</code></pre>"},{"location":"usecases/#fastapi-hive-advantages_1","title":"fastapi-hive advantages","text":"<p>Let's see How to use fastapi-hive as of db part.</p> <p>First, create one db setting file: example/cornerstone/db/implement.py</p> <pre><code>\n\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import declarative_base\nfrom fastapi import FastAPI\nfrom example.cornerstone.config import DATABASE_URL\nfrom fastapi_sqlalchemy import DBSessionMiddleware  # middleware helper\nfrom fastapi_sqlalchemy import db  # an object to provide global access to a database session\n\nfrom fastapi_hive.ioc_framework.cornerstone_container import CornerstoneMeta\n\nBase = declarative_base()\nengine = create_engine(\n    DATABASE_URL,\n    connect_args={\"check_same_thread\": False},\n)\n\n\ndef add_db_middleware(app: FastAPI, cornerstone: CornerstoneMeta):\n    app.add_middleware(DBSessionMiddleware, db_url=DATABASE_URL)\n\n    # cornerstone.state['db'] = db\n\n\ndef create_all_tables(app: FastAPI):\n    Base.metadata.create_all(engine)  # Create tables\n    print(\"-- call create all over ----\")\n\n</code></pre> <p>Secondly, create db initial file, and implement hooks call.</p> <p>example/cornerstone/db/init.py</p> <pre><code>import logging\nimport time\nfrom fastapi_hive.ioc_framework.cornerstone_hooks import CornerstoneHooks, CornerstoneAsyncHooks\nfrom example.cornerstone.db.implement import Base, create_all_tables, add_db_middleware\nfrom fastapi import FastAPI\nfrom starlette.requests import Request\nfrom fastapi_sqlalchemy import db\n\n\n__all__ = ['Base']\n\n\nclass CornerstoneHooksImpl(CornerstoneHooks):\n\n    def __init__(self):\n        super(CornerstoneHooksImpl, self).__init__()\n\n    def pre_endpoint_setup(self):\n        print(\"call pre setup from cornerstone db!!!\")\n\n        add_db_middleware(self.app, self.cornerstone)\n\n        self.app_state['db'] = db\n\n    def post_endpoint_setup(self):\n        print(\"call post setup from cornerstone!!!\")\n\n        create_all_tables(self.app)\n\n    def pre_endpoint_teardown(self):\n        print(\"call pre teardown from cornerstone!!!\")\n\n    def post_endpoint_teardown(self):\n        print(\"call pre teardown from cornerstone!!!\")\n\n    def pre_endpoint_call(self):\n        print(\"call pre endpoint call from cornerstone!!!\")\n\n        self.request_state['db'] = db\n\n    def post_endpoint_call(self):\n        print(\"call post endpoint call from cornerstone!!!\")\n\n\nclass CornerstoneAsyncHooksImpl(CornerstoneAsyncHooks):\n\n    def __init__(self):\n        super(CornerstoneAsyncHooksImpl, self).__init__()\n\n    async def pre_endpoint_setup(self):\n        print(\"call pre setup from cornerstone async!!!\")\n\n    async def post_endpoint_setup(self):\n        print(\"call post setup from cornerstone async!!!\")\n\n    async def pre_endpoint_teardown(self):\n        print(\"call pre teardown from cornerstone async!!!\")\n\n    async def post_endpoint_teardown(self):\n        print(\"call pre teardown from cornerstone async!!!\")\n\n    async def pre_endpoint_call(self):\n        print(\"call pre endpoint call from cornerstone async!!!\")\n\n    async def post_endpoint_call(self):\n        print(\"call post endpoint call from cornerstone async!!!\")\n\n</code></pre> <p>Third, create one endpoint db models file:</p> <p>example/endpoints_package1/notes/db/implement.py</p> <pre><code>\nfrom sqlalchemy import Column, Integer, String, Boolean\n\nfrom example.cornerstone.db import Base\n\n\nclass Note(Base):\n    __tablename__ = \"note\"\n\n    id = Column(Integer, primary_key=True)\n    text = Column(String)\n    completed = Column(Boolean)\n\n</code></pre> <p>Lastly, create a router file to call db with ORM model:</p> <pre><code>\nfrom fastapi import APIRouter\nfrom starlette.requests import Request\nfrom typing import List\nfrom example.endpoints_package1.notes import schemas\nfrom example.endpoints_package1.notes import db as dbmodel\n\nrouter = APIRouter()\n\n\n@router.get(\"\", response_model=List[schemas.Note], name=\"query notes.\")\ndef get_notes(req: Request, skip: int = 0, limit: int = 100):\n    # db = req.app.state.cornerstones['cornerstone.db'][\"db\"].session\n\n    db = req.state.cornerstones['cornerstone.db'][\"db\"].session\n    notes = db.query(dbmodel.Note).offset(skip).limit(limit).all()\n    return notes\n\n\n@router.post(\"\", response_model=schemas.Note, name=\"create note\")\ndef create_note(note: schemas.NoteIn, req: Request):\n    db = req.app.state.cornerstones['cornerstone.db'][\"db\"].session\n\n    db_note = dbmodel.Note(text=note.text, completed=note.completed)\n    db.add(db_note)\n    db.commit()\n    db.refresh(db_note)\n    return db_note\n\n</code></pre>"},{"location":"why/","title":"Why","text":""},{"location":"why/#regular-project-layout-its-cons","title":"Regular project layout &amp; its cons.","text":"<p>Let's look at the regular project folder layout. There are serval function folders in the app, and the folders are arranged by functions, such as routes/models/services. No problem if folders are set like this for small project.</p> <p>But when it comes to large scale project which contains too many services and functions, it will bring tough task to maintain these codes,  because those services' code files are existent in different folders, hard to review, you have to jumping among different folders.</p> <p>Beyond the problem, developer also need to register some functions in main.py, such as router registering.</p> <p>So it is ideal for developer to maintain each related functional code files in one container_name folder, and register all service and function codes into app automatically.</p> <p>For the classical code layout:</p> <p>Reference: https://github.com/eightBEC/fastapi-ml-skeleton/tree/master/fastapi_skeleton</p> <pre><code>    app\n        router\n            heartbeat.py\n            prediction.py\n        models\n            heartbeat.py\n            prediction.py\n        services\n            heartbeat.py\n            prediction.py\n        main.py\n</code></pre>"},{"location":"why/#ideal-project-layout-its-pros","title":"Ideal project layout &amp; its pros.","text":"<p>Here is the ideal folder structure layout from developers' perspective. For each of service container_name(heartbeat and prediction), there is one module folder for containing all functional code files.</p> <p>Furthermore, developers do not have to register function into app, such as router.</p> <pre><code>    app\n        packages\n            heartbeat\n                router.py\n                models.py\n                service.py\n            prediction\n                router.py\n                models.py\n                service.py\n        main.py\n</code></pre>"}]}